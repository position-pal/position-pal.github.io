@startuml location-service

package infrastructure {

    package application {

        package domain {

            interface GPSPosition <<value object>> {
                + latitude: Double
                + longitude: Double
            }

            interface Address <<value object>> {
                + street: String
                + city: String
                + zip: String
                + position: GPSPosition
            }

            Address *-r- "1" GPSPosition

            interface User <<entity>> {
                + id: UserId
                + inGroups: Set<GroupId>
            }
            interface UserId <<value object>>
            interface GroupId <<value object>>

            User *-u- "N" UserId
            User *-u- "N" GroupId

            interface Event {
                + timestamp: Date
                + user: User
            }

            User "1" --* Event

            interface StartRoutingEvent <<domain event>> extends Event {
                + arrivalPosition: GPSPosition
                + estimatedArrivalTime: Date
            }

            StartRoutingEvent *-- "1" GPSPosition

            interface StopRoutingEvent <<domain event>> extends Event

            interface TrackingEvent <<domain event>> extends Event {
                + position: GPSPosition
            }

            TrackingEvent *-- "1" GPSPosition

            interface SOSAlertEvent <<domain event>> extends Event {
                + position: GPSPosition
            }

            SOSAlertEvent *-- "1" GPSPosition

            interface Route <<aggregate root>> {
                + event: StartRoutingEvent
                + positions: List<TrackingEvent>
                + addTrace(TrackingEvent: TrackingEvent): Route
            }

            Route *-u- "1" StartRoutingEvent
            Route *-u- "N" TrackingEvent
        }

        interface TrackingEventsStore <<outbound port>> {
            + update(TrackingEvent: TrackingEvent)
            + by(user: User): TrackingEvent
        }

        TrackingEventsStore o.up. TrackingEvent

        interface RoutesStore <<outbound port>> {
            + update(Route: Route)
            + by(user: User): Route
            + delete(Route: Route)
        }

        RoutesStore o.up. Route

        interface NotificationsService <<outbound port>> {
            + notify(user: User, message: String)
        }

        NotificationsService o.l. User

        interface GeocoderService <<outbound port>> {
            + addressOf(position: GPSPosition): Address
            + positionOf(address: Address): GPSPosition
        }

        GeocoderService o.up. GPSPosition
        GeocoderService o.up. Address

        interface RoutingService <<outbound port>> {
            + estimateArrivalTime(start: GPSPosition, end: GPSPosition): Date
            + distance(start: GPSPosition, end: GPSPosition): GPSPosition
        }

        RoutingService o.up. GPSPosition

        interface UserTrackingInfoService <<inbound port>> {
            + lastTraceOf(user: User): TrackingEvent
            + routeOf(user: User): Route
            + lastStateOf(user: User): State
        }
        note right of UserTrackingInfoService::routeOf
            At most 1 
            route per
            user per 
            time is active
        end note
        enum State {
            + ACTIVE,
            + INACTIVE,
            + SOS,
            + ROUTING
        }

        UserTrackingInfoService o.l. TrackingEvent
        UserTrackingInfoService o.. State

        interface RealTimeTrackingService <<inbound port>> {
            + onNewEvent(event: Event)
        }

        RealTimeTrackingService o.l. Event
    }

    class NotificationsServiceAdapter implements application.NotificationsService
    note top of NotificationsServiceAdapter
        This class is an adapter 
        that forwards notifications to 
        the notification microservice
    end note

    class GeocoderServiceAdapter <<outbound adapter>> implements application.GeocoderService
    class RoutingServiceAdapter <<outbound adapter>> implements application.RoutingService
    note "Uses external geocoding and maps APIs" as geoNote
    GeocoderServiceAdapter .. geoNote
    RoutingServiceAdapter .. geoNote

    class RealTimeTrackingKafkaAdapter <<inbound adapter>>
    RealTimeTrackingKafkaAdapter .up.> application.RealTimeTrackingService : <<uses>>

    class UserTrackingInfoGrpcAdapter <<inbound adapter>> 
    UserTrackingInfoGrpcAdapter .up.> application.UserTrackingInfoService : <<uses>>

}

@enduml