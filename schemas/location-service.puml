@startuml location-service

package infrastructure {

    package application {

        package domain {

            interface GPSPosition {
                + latitude: Double
                + longitude: Double
            }

            interface Address {
                + street: String
                + city: String
                + zip: String
                + position: GPSPosition
            }

            Address *-r- "1" GPSPosition

            interface User {
                + id: UserId
                + inGroups: Set<UserId>
            }
            interface UserId

            User *-l- "N" UserId

            interface Event {
                + timestamp: Date
                + user: User
            }

            User "1" --* Event

            interface StartRoutingEvent extends Event {
                + arrivalPosition: GPSPosition
                + estimatedArrivalTime: Date
            }

            StartRoutingEvent *-- "1" GPSPosition

            interface StopRoutingEvent extends Event

            interface TrackingEvent extends Event {
                + position: GPSPosition
            }

            TrackingEvent *-- "1" GPSPosition

            interface SOSAlertEvent extends Event {
                + position: GPSPosition
            }

            SOSAlertEvent *-- "1" GPSPosition

            interface Route {
                + event: StartRoutingEvent
                + positions: List<TrackingEvent>
                + addTrace(TrackingEvent: TrackingEvent): Route
            }

            Route *-u- "1" StartRoutingEvent
            Route *-u- "N" TrackingEvent
        }

        interface TrackingEventsStore {
            + update(TrackingEvent: TrackingEvent)
            + by(user: User): TrackingEvent
        }

        TrackingEventsStore o.up. TrackingEvent

        interface RoutesStore {
            + update(Route: Route)
            + by(user: User): Route
            + delete(Route: Route)
        }

        note "The Routes and RoutesStore \nclasses may be useful or not \ndepending on the chosen MOM \nand the design of the active \ncomponents" as routesNote

        RoutesStore o.up. Route
        Route .. routesNote
        RoutesStore .r. routesNote

        interface NotificationsService {
            + notify(user: User, message: String)
        }

        NotificationsService o.l. User

        interface GeocoderService {
            + addressOf(position: GPSPosition): Address
            + positionOf(address: Address): GPSPosition
        }

        GeocoderService o.up. GPSPosition
        GeocoderService o.up. Address

        interface RoutingService {
            + estimateArrivalTime(start: GPSPosition, end: GPSPosition): Date
            + distance(start: GPSPosition, end: GPSPosition): GPSPosition
        }

        RoutingService o.up. GPSPosition

        interface TrackingService {
            + onNewEvent(event: Event)
            + lastTraceOf(user: User): TrackingEvent
            + routeOf(user: User): Route
            + lastStateOf(user: User): State
        }

        enum State {
            + ACTIVE,
            + INACTIVE,
            + SOS,
            + ROUTING
        }

        TrackingService o.. State

        TrackingService o.l. Event
        /' TrackingService o.up. User '/
        TrackingService *--> TrackingEventsStore
    }

    class NotificationsServiceAdapter implements application.NotificationsService
    note top of NotificationsServiceAdapter
        This class is an adapter 
        that forwards notifications to 
        the notification microservice
    end note

    class GeocoderServiceAdapter implements application.GeocoderService
    class RoutingServiceAdapter implements application.RoutingService
    note "Uses external geocoding and maps APIs" as geoNote
    GeocoderServiceAdapter .. geoNote
    RoutingServiceAdapter .. geoNote
}

@enduml