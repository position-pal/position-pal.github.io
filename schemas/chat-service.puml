@startuml chat-service
title Chat Service
hide empty members

package infrastructure {

    package core {
        
        interface Event <<domain event>> {
            + timestamp: Date
        }

        interface ChatMessageEvent <<domain event>> extends Event {
            + message: ChatMessage
        }

        interface CreateGroupEvent <<domain event>> extends Event {
            + name: String
        }

        interface UserGroupEvent <<domain event>> extends Event {
            + user: User
            + group: Group
        }

        interface UserEvent <<domain event>> extends Event {
            + user: User
        }

        interface UserEnterToGroupEvent <<domain event>> extends UserGroupEvent

        interface UserLeaveFromGroupEvent <<domain event>> extends UserGroupEvent

        interface UserBecomeOnlineEvent <<domain event>> extends UserEvent

        interface UserBecomeOfflineEvent <<domain event>> extends UserEvent 

        ChatMessageEvent *-- "1" ChatMessage
        
        UserGroupEvent *-- "1" User
        UserGroupEvent *-- "1" Group

        UserEvent *-- "1" User
        
        interface ChatMessage <<entity>> {
            + text: String
            + timestamp: Date
            + from: User
            + toGroup: Group
        }

        interface User <<entity>> {
            + id: UserId
            + nickname: String
            + state: State
        }

        interface UserId <<value object>>

        enum State {
            + ONLINE,
            + OFFILINE,
        }

        interface Group <<entity>> {
            + id: GroupId
            + name: String
        }

        Group *-l- "1" GroupId 

        interface GroupId <<value object>>

        ChatMessage *-r- "1" User
        ChatMessage *-d- "1" Group
        User *-u- "N" Group
        User *-r- "1" State
        User *-u- "1" UserId

        interface Chat <<aggregate root>> {
            + createGroup(): Boolean
            + addUserToGroup(user: User, group: Group): Boolean
            + removeUserFromGroup(user: User, group: Group): Boolean
            + getMembers(group: Group): List<User>
            + getMessages(filter : (message: Message) -> Boolean): List<Message>
        }
        
        Chat *-u- "1" CreateGroupEvent
        Chat *-u- "1" UserEnterToGroupEvent
        Chat *-u- "1" UserLeaveFromGroupEvent   
    }

    
    interface ChatRepository <<repository>> {
        + saveChatMessage(message: ChatMessage): Boolean
        + getChatMessages(filter : (message: Message) -> Boolean): List<Message>
    }

    interface UserRepository <<repository>> {
        + saveUser(user: User): Boolean
        + getUserById(id: UserId): User
        + getUserByNickname(nickname: String): User
    }

    interface GroupRepository <<repository>> {
        + saveGroup(group: Group): Boolean
        + getGroupById(id: GroupId): Group
        + getGroupByName(name: String): Group
    }

    ChatRepository o.. ChatMessage
    GroupRepository o.. Group
    UserRepository o.. User
    

    interface OutputSocketCommunicationService <<outbound port>> {
        + onEvent(event: Event)
    }

    OutputSocketCommunicationService o.. Event

    interface InputSocketCommunicationService <<inbound port>> 

    InputSocketCommunicationService ..> Event: <<creates>>

    interface CommandEvocationService <<inbound port>>

    CommandEvocationService .u.> Chat
}

class SocketAdapter

SocketAdapter --|> OutputSocketCommunicationService
SocketAdapter --|> InputSocketCommunicationService

class GrpcAdapter

GrpcAdapter -u-|> CommandEvocationService

@enduml