<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Implementation Details on PositionPal</title><link>https://position-pal.github.io/docs/5-implementation/</link><description>Recent content in Implementation Details on PositionPal</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://position-pal.github.io/docs/5-implementation/index.xml" rel="self" type="application/rss+xml"/><item><title>Commons implementation details</title><link>https://position-pal.github.io/docs/5-implementation/0-common/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/5-implementation/0-common/</guid><description>&lt;h2 id="message-broker-and-rpc-technologies">Message Broker and RPC technologies &lt;a href="#message-broker-and-rpc-technologies" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>Position Pal&amp;rsquo;s event-based distributed system architecture relies on both synchronous and asynchronous communication between services. For asynchronous interactions, we use a message broker that decouples services and enables event-driven architectures, this handles message routing between services and ensures reliable event delivery. When synchronous communication is required we utilize Remote Procedure Call (RPC) technologies, allowing services to invoke each other&amp;rsquo;s methods as if they were local functions—an approach particularly effective for request-response interactions between services.&lt;/p></description></item><item><title>User and Group Service implementation details</title><link>https://position-pal.github.io/docs/5-implementation/4-user-groupd-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/5-implementation/4-user-groupd-service/</guid><description>&lt;p>This chapter provides an overview of the implementation details of the &lt;strong>User and Group Service&lt;/strong>.&lt;/p>
&lt;h2 id="high-level-overview">High level overview &lt;a href="#high-level-overview" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>The User and Group Service is responsible for managing the users and groups of the system.
It is a core microservice that supplies user and group data to other services and is composed of the following parts:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Authentication Management&lt;/strong>: This is responsible for managing the authentication and identity of the users of the system. It provides APIs for user authentication and identity management.&lt;/p></description></item><item><title>Location Service implementation details</title><link>https://position-pal.github.io/docs/5-implementation/1-location-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/5-implementation/1-location-service/</guid><description>&lt;p>This chapter provides an overview of the implementation details of the &lt;strong>Location Service&lt;/strong>.&lt;/p>
&lt;h2 id="high-level-overview">High level overview &lt;a href="#high-level-overview" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>We adopted &lt;strong>Clean Architecture&lt;/strong> approach with clearly separated layers. This architectural choice provides significant benefits for a service responsible for sensitive user data:&lt;/p>


 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span style="display:flex;">&lt;span>user-service/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── domain/ # Core business entities and rules
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── application/ # Use cases and service interfaces
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── storage/ # Database and persistence implementations
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── presentation/ # Protocol definitions
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── tracking-actors/ # Real-time tracking management adapter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── ws/ # Websocket communication adapter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── grpc/ # gRPC service implementations
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── messages/ # RabbitMQ and Message broker integration
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── entrypoint/ # Application bootstrap&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Each layer has a specific responsibility with dependencies pointing inward toward the domain layer.
This approach allows us to isolate the core business logic from implementation details.&lt;/p></description></item><item><title>Chat Service implementation details</title><link>https://position-pal.github.io/docs/5-implementation/3-chat-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/5-implementation/3-chat-service/</guid><description>&lt;h2 id="chat-messaging-and-real-time-management">Chat Messaging and Real-time Management &lt;a href="#chat-messaging-and-real-time-management" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>The primary functions of the chat service are to manage the &lt;em>chat groups&lt;/em> and the relative &lt;em>messages&lt;/em> that are exchanged between users of these groups.
In most of the cases the amount of messages exchanged is high, and the service needs to manage them in real-time with low latency of response.&lt;/p>
&lt;p>We built a &lt;strong>WebSocket-based&lt;/strong> communication system using an actor model. Specifically, we leveraged the &lt;strong>Event Sourcing&lt;/strong> module from the &lt;em>Akka framework&lt;/em> to handle Group instances. This approach treats Events as first-class citizens while maintaining consistent chat state.&lt;/p></description></item><item><title>Notification Service implementation details</title><link>https://position-pal.github.io/docs/5-implementation/2-notification-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/5-implementation/2-notification-service/</guid><description>&lt;!--## High level overview and modules structure-->
&lt;p>Currently, the only supported notification types are &lt;strong>push notifications&lt;/strong>, which are essential to guarantee that the client is immediately informed about groups changes or user state changes, like the trigger of the SOS alert or the journey start.&lt;/p>
&lt;h2 id="high-level-overview">High level overview &lt;a href="#high-level-overview" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>We adopted &lt;strong>Clean Architecture&lt;/strong> approach with clearly separated layers. This architectural choice provides significant benefits for a service responsible for sensitive user data:&lt;/p></description></item></channel></rss>