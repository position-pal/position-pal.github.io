<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Implementation Details on PositionPal</title><link>https://position-pal.github.io/docs/5-implementation/</link><description>Recent content in Implementation Details on PositionPal</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://position-pal.github.io/docs/5-implementation/index.xml" rel="self" type="application/rss+xml"/><item><title>Location Service implementation details</title><link>https://position-pal.github.io/docs/5-implementation/1-location-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/5-implementation/1-location-service/</guid><description>&lt;p>This chapter provides an overview of the implementation details of the &lt;strong>Location Service&lt;/strong>.&lt;/p>
&lt;h2 id="user-tracking-and-real-time-management">User Tracking and Real-time Management &lt;a href="#user-tracking-and-real-time-management" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>The most important and critical feature of the Location Service is the &lt;strong>tracking&lt;/strong> of the user&amp;rsquo;s location and real-time management of their state considering the high volume of data that needs to be processed in real-time.
Moreover, the service is in charge of the user monitoring during the &lt;em>SOS&lt;/em> and &lt;em>Routing&lt;/em> modes, which require to take real-time actions to ensure the user&amp;rsquo;s safety.&lt;/p></description></item><item><title>Chat Service implementation details</title><link>https://position-pal.github.io/docs/5-implementation/3-chat-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/5-implementation/3-chat-service/</guid><description>&lt;h2 id="chat-messaging-and-real-time-management">Chat Messaging and Real-time Management &lt;a href="#chat-messaging-and-real-time-management" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>The primary functions of the chat service are to manage the &lt;em>chat groups&lt;/em> and the relative &lt;em>messages&lt;/em> that are exchanged between users of these groups.
In most of the cases the amount of messages exchanged is high, and the service needs to manage them in real-time with low latency of response.&lt;/p>
&lt;p>We built a &lt;strong>WebSocket-based&lt;/strong> communication system using an actor model. Specifically, we leveraged the &lt;strong>Event Sourcing&lt;/strong> module from the &lt;em>Akka framework&lt;/em> to handle Group instances. This approach treats Events as first-class citizens while maintaining consistent chat state.&lt;/p></description></item><item><title>Notification Service implementation details</title><link>https://position-pal.github.io/docs/5-implementation/2-notification-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/5-implementation/2-notification-service/</guid><description>&lt;!--## High level overview and modules structure-->
&lt;p>Currently, the only supported notification types are &lt;strong>push notifications&lt;/strong>, which are essential to guarantee that the client is immediately informed about groups changes or user state changes, like the trigger of the SOS alert or the journey start.&lt;/p>
&lt;!--

&lt;div style="width: 100%; overflow-x: auto; white-space: nowrap;">
 &lt;img 
 src="https://position-pal.github.io/res/repo-structure-light.svg" 
 alt="repo-structure schema" 
 style="max-width: 1100px;"
 class="schema"
 />
&lt;/div>


-->
&lt;h2 id="message-broker">Message broker &lt;a href="#message-broker" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>Like already presented in the &lt;a href="https://position-pal.github.io/docs/3-arch-design/2-architecture-design/">Architecture Design&lt;/a> section, the notification service is integrated with the message broker to receive notification commands from other microservices.&lt;/p></description></item></channel></rss>