<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Design on PositionPal</title><link>https://position-pal.github.io/docs/design/</link><description>Recent content in Design on PositionPal</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 02 Aug 2024 16:20:00 +0200</lastBuildDate><atom:link href="https://position-pal.github.io/docs/design/index.xml" rel="self" type="application/rss+xml"/><item><title>Location Service</title><link>https://position-pal.github.io/docs/design/location-service/</link><pubDate>Fri, 02 Aug 2024 16:21:33 +0200</pubDate><guid>https://position-pal.github.io/docs/design/location-service/</guid><description>The location service is responsible for location tracking and management.
Abstract Design linkMain domain concepts (from knowledge crunching) linkTODO: To keep in sync with the code
Concept Description Synonyms Position GPS coordinates Route A set of positions that can be interpolated forming a path between two geographical positions Path Session Represent a state and a position of a user at a certain time Tracking State State of a user at a certain time, the values that it could assume are: online, offline and SOS Structure link @startuml location-service-structure package infrastructure { package application { package domain { interface GPSPosition &amp;lt;&amp;lt;value object&amp;gt;&amp;gt; { + latitude: Double + longitude: Double } &amp;#39; interface Address &amp;lt;&amp;lt;value object&amp;gt;&amp;gt; { &amp;#39; + street: String &amp;#39; + city: String &amp;#39; + zip: String &amp;#39; + position: GPSPosition &amp;#39; } &amp;#39; &amp;#39; Address *-r- &amp;#34;1&amp;#34; GPSPosition interface User &amp;lt;&amp;lt;entity&amp;gt;&amp;gt; { + id: UserId + inGroups: Set&amp;lt;GroupId&amp;gt; } interface UserId &amp;lt;&amp;lt;value object&amp;gt;&amp;gt; interface GroupId &amp;lt;&amp;lt;value object&amp;gt;&amp;gt; User *-u- &amp;#34;N&amp;#34; UserId User *-u- &amp;#34;N&amp;#34; GroupId interface Event { + timestamp: Date + user: User } User &amp;#34;1&amp;#34; --* Event interface StartRoutingEvent &amp;lt;&amp;lt;domain event&amp;gt;&amp;gt; extends Event { + arrivalPosition: GPSPosition + estimatedArrivalTime: Date } StartRoutingEvent *-- &amp;#34;1&amp;#34; GPSPosition interface TrackingEvent &amp;lt;&amp;lt;domain event&amp;gt;&amp;gt; extends Event { + position: GPSPosition } TrackingEvent *-- &amp;#34;1&amp;#34; GPSPosition interface StopRoutingEvent &amp;lt;&amp;lt;domain event&amp;gt;&amp;gt; extends Event interface SOSAlertEvent &amp;lt;&amp;lt;domain event&amp;gt;&amp;gt; extends Event { + position: GPSPosition } SOSAlertEvent *-- &amp;#34;1&amp;#34; GPSPosition interface Route &amp;lt;&amp;lt;aggregate root&amp;gt;&amp;gt; { + event: StartRoutingEvent + positions: List&amp;lt;TrackingEvent&amp;gt; + addTrace(TrackingEvent: TrackingEvent): Route } Route *-u- &amp;#34;1&amp;#34; StartRoutingEvent Route *-u- &amp;#34;N&amp;#34; TrackingEvent } interface TrackingEventsStore &amp;lt;&amp;lt;outbound port&amp;gt;&amp;gt; { + update(TrackingEvent: TrackingEvent) + by(user: User): TrackingEvent } TrackingEventsStore o.</description></item></channel></rss>