<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PositionPal</title><link>https://position-pal.github.io/</link><description>Recent content on PositionPal</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://position-pal.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://position-pal.github.io/docs/1-introduction/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/1-introduction/introduction/</guid><description>&lt;br>
&lt;h2 id="what-is-positionpal">What is PositionPal? &lt;a href="#what-is-positionpal" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>PositionPal is a &lt;strong>micro-services-based&lt;/strong> application for creating &lt;strong>groups&lt;/strong> of &lt;strong>trusted&lt;/strong> users with whom to &lt;strong>share location&lt;/strong>, &lt;strong>routes&lt;/strong>, and &lt;strong>notify of dangerous or emergency situation&lt;/strong> to create an &lt;em>effective&lt;/em> and &lt;em>timely&lt;/em> service and &lt;em>support network&lt;/em>.&lt;/p>
&lt;p>The idea comes from &lt;a href="https://www.open.online/2024/04/04/scrivi-quando-arrivi-gruppo-whatsapp-ragazze/" rel="external" target="_blank">some news&lt;svg width="16" height="16" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">&lt;path fill="currentColor" d="M14 5c-.552 0-1-.448-1-1s.448-1 1-1h6c.552 0 1 .448 1 1v6c0 .552-.448 1-1 1s-1-.448-1-1v-3.586l-7.293 7.293c-.391.39-1.024.39-1.414 0-.391-.391-.391-1.024 0-1.414l7.293-7.293h-3.586zm-9 2c-.552 0-1 .448-1 1v11c0 .552.448 1 1 1h11c.552 0 1-.448 1-1v-4.563c0-.552.448-1 1-1s1 .448 1 1v4.563c0 1.657-1.343 3-3 3h-11c-1.657 0-3-1.343-3-3v-11c0-1.657 1.343-3 3-3h4.563c.552 0 1 .448 1 1s-.448 1-1 1h-4.563z"/>&lt;/svg>&lt;/a> read recently about young people who, on their way home at night in unsafe areas of the city, share their location in a WhatsApp group of users to support and watch each other.&lt;/p></description></item><item><title>Functional Requirements</title><link>https://position-pal.github.io/docs/2-domain-analysis/1-functional-requirements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/2-domain-analysis/1-functional-requirements/</guid><description>&lt;p>In this section are collected the &lt;strong>functional requirements&lt;/strong> of the system in the form of &lt;em>User Stories&lt;/em>.&lt;/p>
&lt;h2 id="user-stories">User Stories &lt;a href="#user-stories" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="users-management">Users Management &lt;a href="#users-management" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;em>
&lt;ol>
&lt;li>
&lt;p>As a new user &lt;br>
I want to register with the system using my details &lt;br>
So that I can access the application&amp;rsquo;s features&lt;/p>
&lt;/li>
&lt;li>
&lt;p>As a registered user &lt;br>
I want to log in with my credentials &lt;br>
So that I can access my account and use the application&lt;/p>
&lt;/li>
&lt;li>
&lt;p>As a logged user &lt;br>
I want to update my profile information &lt;br>
So that I can keep my personal details current&lt;/p></description></item><item><title>Business Requirements</title><link>https://position-pal.github.io/docs/2-domain-analysis/2-business-requirements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/2-domain-analysis/2-business-requirements/</guid><description>&lt;h2 id="glossary">Glossary &lt;a href="#glossary" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>??&lt;/p>
&lt;h2 id="use-cases">Use cases &lt;a href="#use-cases" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="users-and-groups-management">Users and Groups Management &lt;a href="#users-and-groups-management" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;div style="width: 100%; overflow-x: auto; white-space: nowrap;">
 &lt;img 
 src="https://position-pal.github.io/res/users-use-cases-light.svg" 
 alt="users-use-cases schema" 
 style="max-width: 1100px;"
 class="schema"
 />
&lt;/div>
&lt;h3 id="user-management-use-cases">User Management Use Cases &lt;a href="#user-management-use-cases" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>Register with the system&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Actor&lt;/strong>: User&lt;/li>
&lt;li>&lt;strong>Description&lt;/strong>: A new user creates an account in the system.&lt;/li>
&lt;li>&lt;strong>Preconditions&lt;/strong>:
&lt;ul>
&lt;li>The user has not previously registered with the system.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Main Scenario&lt;/strong>:
&lt;ol>
&lt;li>The user provides required registration information (name, surname, email and password);&lt;/li>
&lt;li>The system validates the provided information;&lt;/li>
&lt;li>The system creates a new user account;&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;strong>Alternative Scenario&lt;/strong>: Registration information is invalid
&lt;ol>
&lt;li>The system notifies the user about validation errors;&lt;/li>
&lt;li>The user corrects the information and resubmits.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;strong>Postcondition&lt;/strong>: The user has a registered account in the system.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Log in with my credentials&lt;/strong>&lt;/p></description></item><item><title>Quality Attributes</title><link>https://position-pal.github.io/docs/2-domain-analysis/3-quality-attributes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/2-domain-analysis/3-quality-attributes/</guid><description>&lt;p>&lt;em>Quality Attributes&lt;/em> (&lt;em>QA&lt;/em>), also known as &lt;em>Non-Functional Requirements&lt;/em> (&lt;em>NFR&lt;/em>), are measurable properties of a system that describe its qualities and indicate how well it satisfies the needs of its stakeholders beyond the functional requirements.&lt;/p>
&lt;p>These attributes play a crucial role in shaping the system architecture, as they influence design decisions, trade-offs, and the selection of appropriate technologies and patterns.&lt;/p>
&lt;p>In the context of this project have been identified the following quality attributes that are considered essential for the success of system, divided into &amp;ldquo;Runtime&amp;rdquo; and &amp;ldquo;Development Time&amp;rdquo; categories:&lt;/p></description></item><item><title>Event Storming</title><link>https://position-pal.github.io/docs/2-domain-analysis/4-event-storming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/2-domain-analysis/4-event-storming/</guid><description>&lt;p>In order to extract the main functionality of the application as quickly and effectively as possible, &lt;strong>Event Storming&lt;/strong>, a collaborative and visual modeling technique particularly used and valued in the agile and Domain-Driven development context, was used.&lt;/p>
&lt;p>Its power comes from a heterogeneous, multidisciplinary group of experts, from architects to product owners, via UI/UX designers to testers, who, together, collaborate to extract key features and the processes that drive them, sharing this knowledge so that it is shared beyond the compartments of each team.
Moreover, this approach allows for uniformity in the language used (the &lt;em>ubiquitous language&lt;/em>) and for raising and then resolving any ambiguities or misunderstandings that may arise early in the project.&lt;/p></description></item><item><title>Bounded Contexts</title><link>https://position-pal.github.io/docs/3-arch-design/1-bounded-contexts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/3-arch-design/1-bounded-contexts/</guid><description>&lt;p>Following the event storming session, the subsequent bounded contexts have been identified:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Users Management&lt;/strong>: it is responsible for managing the users&amp;rsquo; lifecycle, from registration to deletion and the management of their profile information along with the authentication and authorization.&lt;/li>
&lt;li>&lt;strong>Groups Management&lt;/strong>: it is responsible for managing the groups&amp;rsquo; lifecycle, from creation to deletion, and the management of the group&amp;rsquo;s members.&lt;/li>
&lt;li>&lt;strong>Location Tracking&lt;/strong>: it is responsible for managing the location tracking of the users, including the sharing of the location with groups&amp;rsquo; members, the reception of location updates, thw sending of SOS alerts and the management of their paths.&lt;/li>
&lt;li>&lt;strong>Notifications&lt;/strong>: it is responsible for managing the notifications, including the push notifications to the users&amp;rsquo; devices.&lt;/li>
&lt;li>&lt;strong>Chat&lt;/strong>: it is responsible for managing the chat between the users and the groups&amp;rsquo; members.&lt;/li>
&lt;/ul>
&lt;p>In the following sections, we will provide a detailed view of each bounded context, including its &lt;strong>&lt;em>Ubiquitous Language&lt;/em>&lt;/strong>, the &lt;strong>&lt;em>Commands&lt;/em>&lt;/strong> and the &lt;strong>&lt;em>Events&lt;/em>&lt;/strong> guiding the interactions between the different contexts.
These can be categorized as &lt;strong>&lt;em>Driving&lt;/em>&lt;/strong> or &lt;strong>&lt;em>Driven Events&lt;/em>&lt;/strong>: the former are the events triggered by the user&amp;rsquo;s actions and that drives an application use case, while the latter are the events that are triggered by the system as a reaction to a use case or a system state change.
Moreover we distinguish between &lt;em>Commands&lt;/em> and &lt;em>Events&lt;/em> to highlight the difference between a request to perform an action (&lt;em>Command&lt;/em>) and the notification of something meaningful that has happened (&lt;em>Event&lt;/em>):&lt;/p></description></item><item><title>Architecture Design</title><link>https://position-pal.github.io/docs/3-arch-design/2-architecture-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/3-arch-design/2-architecture-design/</guid><description>&lt;p>Following the identification and definition of the quality attributes, a &lt;em>&lt;strong>microservice architecture&lt;/strong>&lt;/em> was chosen.
This is characterized by the decomposition of the system into a set of independent, and loosely coupled services, each of which is responsible for a specific business domain or functionality.
Indeed, the use of this architectural style enables the continuous delivery and deployment of large, complex applications, the ability to scale horizontally with ease, the possibility to use different technologies and programming languages for each service and an increase in the overall system&amp;rsquo;s maintainability.
Moreover it allows to isolate failures and to improve the fault tolerance of the system, hence gaining in reliability.&lt;/p></description></item><item><title>Architectural Patterns</title><link>https://position-pal.github.io/docs/3-arch-design/4-patterns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/3-arch-design/4-patterns/</guid><description>&lt;p>In this page are collected the Microservice Architectural Pattern we used in the design of the system, following the &lt;a href="https://position-pal.github.io/docs/3-arch-design/4-patterns/" rel="external" target="_blank">Chris Richardson&amp;rsquo;s taxonomy&lt;svg width="16" height="16" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">&lt;path fill="currentColor" d="M14 5c-.552 0-1-.448-1-1s.448-1 1-1h6c.552 0 1 .448 1 1v6c0 .552-.448 1-1 1s-1-.448-1-1v-3.586l-7.293 7.293c-.391.39-1.024.39-1.414 0-.391-.391-.391-1.024 0-1.414l7.293-7.293h-3.586zm-9 2c-.552 0-1 .448-1 1v11c0 .552.448 1 1 1h11c.552 0 1-.448 1-1v-4.563c0-.552.448-1 1-1s1 .448 1 1v4.563c0 1.657-1.343 3-3 3h-11c-1.657 0-3-1.343-3-3v-11c0-1.657 1.343-3 3-3h4.563c.552 0 1 .448 1 1s-.448 1-1 1h-4.563z"/>&lt;/svg>&lt;/a>&lt;/p>
&lt;h2 id="service-collaboration">Service collaboration &lt;a href="#service-collaboration" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="database-per-service">&lt;a href="https://microservices.io/patterns/data/database-per-service.html" rel="external" target="_blank">Database per Service&lt;svg width="16" height="16" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">&lt;path fill="currentColor" d="M14 5c-.552 0-1-.448-1-1s.448-1 1-1h6c.552 0 1 .448 1 1v6c0 .552-.448 1-1 1s-1-.448-1-1v-3.586l-7.293 7.293c-.391.39-1.024.39-1.414 0-.391-.391-.391-1.024 0-1.414l7.293-7.293h-3.586zm-9 2c-.552 0-1 .448-1 1v11c0 .552.448 1 1 1h11c.552 0 1-.448 1-1v-4.563c0-.552.448-1 1-1s1 .448 1 1v4.563c0 1.657-1.343 3-3 3h-11c-1.657 0-3-1.343-3-3v-11c0-1.657 1.343-3 3-3h4.563c.552 0 1 .448 1 1s-.448 1-1 1h-4.563z"/>&lt;/svg>&lt;/a> &lt;a href="#database-per-service" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;p>Each microservice&amp;rsquo;s persistent data is private to that service and accessible only via its API.
More specifically, an approach where each microservice has &lt;strong>its own schema&lt;/strong> has been adopted, favoring &lt;em>data isolation&lt;/em>, making ownership of the data clearer and ensuring the services are &lt;em>loosely coupled&lt;/em>.&lt;/p></description></item><item><title>User and Group Service design</title><link>https://position-pal.github.io/docs/4-detailed-design/5-user-groups-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/4-detailed-design/5-user-groups-service/</guid><description>&lt;p>In this section it is presented the abstract design of the &lt;strong>User and Group Service&lt;/strong>.
As per best practices, the design is based on the &lt;strong>Domain-Driven Design&lt;/strong> principles, and is presented in terms of the main three views: &lt;strong>structure&lt;/strong>, &lt;strong>interaction&lt;/strong>, and &lt;strong>behavior&lt;/strong>.&lt;/p>
&lt;h2 id="abstract-design">Abstract Design &lt;a href="#abstract-design" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="structure">Structure &lt;a href="#structure" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;p>The main domain concepts and events are presented hereafter and reified in the following classes structure, following the DDD building blocks.&lt;/p>


 
 &lt;pre tabindex="0">&lt;code class="language-plantuml" data-lang="plantuml">@startuml
package domain {
 package user {
 interface User &amp;lt;&amp;lt;entity&amp;gt;&amp;gt; {
 + id: UserId
 + name: String
 + email: String
 + password: String
 }
 interface UserId &amp;lt;&amp;lt;value object&amp;gt;&amp;gt; {
 + value: UUID
 }
 User *-right-&amp;gt; &amp;#34;1&amp;#34; UserId
 }

 package group {
 interface Group &amp;lt;&amp;lt;entity&amp;gt;&amp;gt; {
 + id: GroupId
 + name: String
 + members: List&amp;lt;User&amp;gt;
 }
 interface GroupId &amp;lt;&amp;lt;value object&amp;gt;&amp;gt; {
 + value: UUID
 }
 Group *-right-&amp;gt; &amp;#34;1&amp;#34; GroupId
 Group --&amp;gt; &amp;#34;0..*&amp;#34; User
 }
 
 package event {
 interface DomainEvent &amp;lt;&amp;lt;event&amp;gt;&amp;gt; {
 }
 
 class UserCreated &amp;lt;&amp;lt;event&amp;gt;&amp;gt; {
 + userId: UserId
 + name: String
 + email: String
 }
 class GroupCreated &amp;lt;&amp;lt;event&amp;gt;&amp;gt; {
 + groupId: GroupId
 + name: String
 }
 class UserAddedToGroup &amp;lt;&amp;lt;event&amp;gt;&amp;gt; {
 + userId: UserId
 + groupId: GroupId
 }
 class UserRemovedFromGroup &amp;lt;&amp;lt;event&amp;gt;&amp;gt; {
 + userId: UserId
 + groupId: GroupId
 }
 
 UserCreated ..|&amp;gt; DomainEvent
 GroupCreated ..|&amp;gt; DomainEvent
 UserAddedToGroup ..|&amp;gt; DomainEvent
 UserRemovedFromGroup ..|&amp;gt; DomainEvent
 }
}
@enduml&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>&lt;code>User&lt;/code>&lt;/strong>: The User entity represents an individual in the system. Each User is uniquely identified by a value object, &lt;em>UserId&lt;/em>, ensuring consistency and traceability. The entity includes attributes such as name, email, and password, which can be updated while maintaining the same identity.&lt;/p></description></item><item><title>Shared Kernel design</title><link>https://position-pal.github.io/docs/4-detailed-design/1-shared-kernel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/4-detailed-design/1-shared-kernel/</guid><description>&lt;p>The shared kernel includes the common entities used by all services.
Its primary objective is to encapsulate &lt;em>only&lt;/em> the integration contracts and data structures meant to be passed across the boundaries of the bounded contexts.&lt;/p>
&lt;p>Since the system&amp;rsquo;s architecture is event-driven, communication between microservices occurs exclusively through events and commands exchanged via the message broker.
These events and commands have been represented as classes and interfaces, as illustrated in the following UML diagram.
This approach facilitates and reduce the cost of duplicating code across services, ensuring consistency and coherence in the system&amp;rsquo;s communication.&lt;/p></description></item><item><title>Location Service design</title><link>https://position-pal.github.io/docs/4-detailed-design/2-location-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/4-detailed-design/2-location-service/</guid><description>&lt;!--This chapter explains the strategies used to meet the requirements identified in the analysis.-->
&lt;p>In this section it is presented the abstract design of the &lt;strong>Location Service&lt;/strong>.
As per best practices, the design is based on the &lt;strong>Domain-Driven Design&lt;/strong> principles, and is presented in terms of the main three views: &lt;strong>structure&lt;/strong>, &lt;strong>interaction&lt;/strong>, and &lt;strong>behavior&lt;/strong>.&lt;/p>
&lt;h2 id="abstract-design">Abstract Design &lt;a href="#abstract-design" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="structure">Structure &lt;a href="#structure" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;p>The main domain concepts and events are presented hereafter and reified in the following classes structure, following the DDD building blocks.&lt;/p></description></item><item><title>Chat Service design</title><link>https://position-pal.github.io/docs/4-detailed-design/4-chat-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/4-detailed-design/4-chat-service/</guid><description>&lt;p>Chat service is responsible for managing the &lt;strong>communication between users in &lt;em>real-time&lt;/em>&lt;/strong>. This document describes the detailed design of the chat service, including its architecture, components, and interactions.&lt;/p>
&lt;h2 id="abstract-design">Abstract Design &lt;a href="#abstract-design" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>Here are presented the main components of the chat service, we start describing the foundamental entities of the domain, then we move to the infrastructure layer, where we define the commands and events that will be used to interact with the domain entities.&lt;/p></description></item><item><title>Notification Service design</title><link>https://position-pal.github.io/docs/4-detailed-design/3-notification-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/4-detailed-design/3-notification-service/</guid><description>&lt;p>In this section is presented the abstract design of the notification service.&lt;/p>
&lt;p>As already presented, its main responsibility is to &lt;strong>send notifications&lt;/strong> to the users, based on the events that occur in the system.&lt;/p>
&lt;h2 id="structure">Structure &lt;a href="#structure" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>The structure of the service is quite simple:&lt;/p>
&lt;div style="width: 100%; overflow-x: auto; white-space: nowrap;">
 &lt;img 
 src="https://position-pal.github.io/res/notification-service-structure-light.svg" 
 alt="notification-service-structure schema" 
 style="max-width: 1100px;"
 class="schema"
 />
&lt;/div>
&lt;ul>
&lt;li>&lt;code>Token&lt;/code> is a value object that represents the token used to identify the device of a user.&lt;/li>
&lt;li>&lt;code>UserToken&lt;/code> is an entity that represents the association between a user and a token.&lt;/li>
&lt;li>&lt;code>UsersTokensService&lt;/code> is the service that allows registering and invalidating tokens for users.&lt;/li>
&lt;li>&lt;code>UsersTokensRepository&lt;/code> is the repository that stores the associations between users and tokens.&lt;/li>
&lt;li>&lt;code>NotificationPublisher&lt;/code> is the service that sends notifications to users.
&lt;ul>
&lt;li>&lt;code>PublishingTargetStrategy&lt;/code> is the strategy used to determine the target of the notification. Two stategies exists: one to send to all members of a group (corresponding to the &lt;code>GroupWisePushNotification&lt;/code> command) and another to send to all members sharing a group with a user (corresponding to the &lt;code>CoMembersPushNotification&lt;/code> command).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>GroupsRepository&lt;/code> is the repository that allows storing and retrieving the members of the groups. This is called by the message broker adapter on every events whose topic is related to groups state changes.&lt;/li>
&lt;/ul>
&lt;h2 id="interaction">Interaction &lt;a href="#interaction" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>The main flow scenario is depicted in the following sequence diagram:&lt;/p></description></item><item><title>Location Service implementation details</title><link>https://position-pal.github.io/docs/5-implementation/1-location-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/5-implementation/1-location-service/</guid><description>&lt;p>This chapter provides an overview of the implementation details of the &lt;strong>Location Service&lt;/strong>.&lt;/p>
&lt;h2 id="user-tracking-and-real-time-management">User Tracking and Real-time Management &lt;a href="#user-tracking-and-real-time-management" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>The most important and critical feature of the Location Service is the &lt;strong>tracking&lt;/strong> of the user&amp;rsquo;s location and real-time management of their state considering the high volume of data that needs to be processed in real-time.
Moreover, the service is in charge of the user monitoring during the &lt;em>SOS&lt;/em> and &lt;em>Routing&lt;/em> modes, which require to take real-time actions to ensure the user&amp;rsquo;s safety.&lt;/p></description></item><item><title>Chat Service implementation details</title><link>https://position-pal.github.io/docs/5-implementation/3-chat-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/5-implementation/3-chat-service/</guid><description>&lt;h2 id="chat-messaging-and-real-time-management">Chat Messaging and Real-time Management &lt;a href="#chat-messaging-and-real-time-management" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>The primary functions of the chat service are to manage the &lt;em>chat groups&lt;/em> and the relative &lt;em>messages&lt;/em> that are exchanged between users of these groups.
In most of the cases the amount of messages exchanged is high, and the service needs to manage them in real-time with low latency of response.&lt;/p>
&lt;p>We built a &lt;strong>WebSocket-based&lt;/strong> communication system using an actor model. Specifically, we leveraged the &lt;strong>Event Sourcing&lt;/strong> module from the &lt;em>Akka framework&lt;/em> to handle Group instances. This approach treats Events as first-class citizens while maintaining consistent chat state.&lt;/p></description></item><item><title>Notification Service implementation details</title><link>https://position-pal.github.io/docs/5-implementation/2-notification-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/5-implementation/2-notification-service/</guid><description>&lt;!--## High level overview and modules structure-->
&lt;p>Currently, the only supported notification types are &lt;strong>push notifications&lt;/strong>, which are essential to guarantee that the client is immediately informed about groups changes or user state changes, like the trigger of the SOS alert or the journey start.&lt;/p>
&lt;!--

&lt;div style="width: 100%; overflow-x: auto; white-space: nowrap;">
 &lt;img 
 src="https://position-pal.github.io/res/repo-structure-light.svg" 
 alt="repo-structure schema" 
 style="max-width: 1100px;"
 class="schema"
 />
&lt;/div>


-->
&lt;h2 id="message-broker">Message broker &lt;a href="#message-broker" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>Like already presented in the &lt;a href="https://position-pal.github.io/docs/3-arch-design/2-architecture-design/">Architecture Design&lt;/a> section, the notification service is integrated with the message broker to receive notification commands from other microservices.&lt;/p></description></item><item><title>Self Assessment and Validation</title><link>https://position-pal.github.io/docs/6-validation/validation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/6-validation/validation/</guid><description>&lt;p>Different types of &lt;em>automated&lt;/em> tests, at different granularity, are in place to ensure the correctness of the system, as well as the quality of the software product as a whole.&lt;/p>
&lt;p>The testing strategy follows &lt;a href="https://martinfowler.com/articles/practical-test-pyramid.html" rel="external" target="_blank">Martin Fowler’s Test Pyramid idea&lt;svg width="16" height="16" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">&lt;path fill="currentColor" d="M14 5c-.552 0-1-.448-1-1s.448-1 1-1h6c.552 0 1 .448 1 1v6c0 .552-.448 1-1 1s-1-.448-1-1v-3.586l-7.293 7.293c-.391.39-1.024.39-1.414 0-.391-.391-.391-1.024 0-1.414l7.293-7.293h-3.586zm-9 2c-.552 0-1 .448-1 1v11c0 .552.448 1 1 1h11c.552 0 1-.448 1-1v-4.563c0-.552.448-1 1-1s1 .448 1 1v4.563c0 1.657-1.343 3-3 3h-11c-1.657 0-3-1.343-3-3v-11c0-1.657 1.343-3 3-3h4.563c.552 0 1 .448 1 1s-.448 1-1 1h-4.563z"/>&lt;/svg>&lt;/a>, which advocates for a higher number of low-level unit tests that are that are fast and cost-effective, complemented by fewer high-level integration and end-to-end tests that, while slower and more complex, validate the overall system&amp;rsquo;s functionalities.&lt;/p></description></item><item><title>DevOps</title><link>https://position-pal.github.io/docs/7-devops/devops/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/7-devops/devops/</guid><description>&lt;h2 id="build-automation">Build Automation &lt;a href="#build-automation" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>Since all microservices are JVM-based (Scala and Kotlin) &lt;strong>Gradle&lt;/strong> have been chosen as the build automation tool.&lt;/p>
&lt;p>Regarding the frontend and the gateway, since they are both written in Javascript, the team has chosen &lt;strong>npm&lt;/strong> as the build automation tool.&lt;/p>
&lt;p>In the following sections we provide an overview of the relevant configurations and plugins used in the project.&lt;/p>
&lt;h3 id="projects-structure-and-shared-kernel-package">Projects Structure and shared kernel package &lt;a href="#projects-structure-and-shared-kernel-package" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;p>The team has decided to implement the microservices using a &lt;strong>one-repository-per-service&lt;/strong> approach, with each service managed as an &lt;strong>independent&lt;/strong> Gradle project, where Gradle sub-projects are used to structure the code, mapping each layer and adapter in the Hexagonal Architecture to a dedicated sub-project.&lt;/p></description></item></channel></rss>