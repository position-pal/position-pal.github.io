<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PositionPal</title><link>https://position-pal.github.io/</link><description>Recent content on PositionPal</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://position-pal.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://position-pal.github.io/docs/1-introduction/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/1-introduction/introduction/</guid><description>&lt;br&gt;
&lt;h2 id="what-is-positionpal"&gt;What is PositionPal? &lt;a href="#what-is-positionpal" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;PositionPal is a &lt;strong&gt;micro-services-based&lt;/strong&gt; application for creating &lt;strong&gt;groups&lt;/strong&gt; of &lt;strong&gt;trusted&lt;/strong&gt; users with whom to &lt;strong&gt;share location&lt;/strong&gt;, &lt;strong&gt;routes&lt;/strong&gt;, and &lt;strong&gt;notify of dangerous or emergency situation&lt;/strong&gt; to create an &lt;em&gt;effective&lt;/em&gt; and &lt;em&gt;timely&lt;/em&gt; service and &lt;em&gt;support network&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The idea comes from &lt;a href="https://www.open.online/2024/04/04/scrivi-quando-arrivi-gruppo-whatsapp-ragazze/" rel="external" target="_blank"&gt;some news&lt;svg width="16" height="16" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path fill="currentColor" d="M14 5c-.552 0-1-.448-1-1s.448-1 1-1h6c.552 0 1 .448 1 1v6c0 .552-.448 1-1 1s-1-.448-1-1v-3.586l-7.293 7.293c-.391.39-1.024.39-1.414 0-.391-.391-.391-1.024 0-1.414l7.293-7.293h-3.586zm-9 2c-.552 0-1 .448-1 1v11c0 .552.448 1 1 1h11c.552 0 1-.448 1-1v-4.563c0-.552.448-1 1-1s1 .448 1 1v4.563c0 1.657-1.343 3-3 3h-11c-1.657 0-3-1.343-3-3v-11c0-1.657 1.343-3 3-3h4.563c.552 0 1 .448 1 1s-.448 1-1 1h-4.563z"/&gt;&lt;/svg&gt;&lt;/a&gt; read recently about young people who, on their way home at night in unsafe areas of the city, share their location in a WhatsApp group of users to support and watch each other.&lt;/p&gt;</description></item><item><title>Functional Requirements</title><link>https://position-pal.github.io/docs/2-domain-analysis/1-functional-requirements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/2-domain-analysis/1-functional-requirements/</guid><description>&lt;p&gt;In this section are collected the &lt;strong&gt;functional requirements&lt;/strong&gt; of the system in the form of &lt;em&gt;User Stories&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id="user-stories"&gt;User Stories &lt;a href="#user-stories" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id="users-management"&gt;Users Management &lt;a href="#users-management" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;em&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;As a new user &lt;br&gt;
I want to register with the system using my information &lt;br&gt;
So that I can access the application features&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As a registered user &lt;br&gt;
I want to log in with my credentials &lt;br&gt;
So that I can access my account and use the application&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As a logged user &lt;br&gt;
I want to update my profile information &lt;br&gt;
So that I can keep up-to-date my personal details&lt;/p&gt;</description></item><item><title>Business Requirements</title><link>https://position-pal.github.io/docs/2-domain-analysis/2-business-requirements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/2-domain-analysis/2-business-requirements/</guid><description>&lt;h2 id="use-cases"&gt;Use cases &lt;a href="#use-cases" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id="users-and-groups-management"&gt;Users and Groups Management &lt;a href="#users-and-groups-management" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;div style="width: 100%; overflow-x: auto; white-space: nowrap;"&gt;
 &lt;img 
 src="https://position-pal.github.io/res/users-use-cases-light.svg" 
 alt="users-use-cases schema" 
 style="max-width: 1100px;"
 class="schema"
 /&gt;
&lt;/div&gt;
&lt;h3 id="user-management-use-cases"&gt;User Management Use Cases &lt;a href="#user-management-use-cases" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Register with the system&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Actor&lt;/strong&gt;: User&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Description&lt;/strong&gt;: A new user creates an account in the system.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Preconditions&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;The user has not previously registered with the system.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Main Scenario&lt;/strong&gt;:
&lt;ol&gt;
&lt;li&gt;The user provides required registration information;&lt;/li&gt;
&lt;li&gt;The system validates the provided information;&lt;/li&gt;
&lt;li&gt;The system creates a new user account;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Alternative Scenario&lt;/strong&gt;: Registration information is invalid
&lt;ol&gt;
&lt;li&gt;The system notifies the user about validation errors;&lt;/li&gt;
&lt;li&gt;The user corrects the information and resubmits.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Postcondition&lt;/strong&gt;: The user has a registered account in the system.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Log in with my credentials&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>Quality Attributes</title><link>https://position-pal.github.io/docs/2-domain-analysis/3-quality-attributes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/2-domain-analysis/3-quality-attributes/</guid><description>&lt;p&gt;&lt;em&gt;Quality Attributes&lt;/em&gt; (&lt;em&gt;QA&lt;/em&gt;), also known as &lt;em&gt;Non-Functional Requirements&lt;/em&gt; (&lt;em&gt;NFR&lt;/em&gt;), are measurable properties of a system that describe its qualities and indicate how well it satisfies the needs of its stakeholders beyond the functional requirements.&lt;/p&gt;
&lt;p&gt;These attributes play a crucial role in shaping the system architecture, as they influence design decisions, trade-offs, and the selection of appropriate technologies and patterns.&lt;/p&gt;
&lt;p&gt;In the context of this project have been identified the following quality attributes that are considered essential for the success of system, divided into &amp;ldquo;Runtime&amp;rdquo; and &amp;ldquo;Development Time&amp;rdquo; categories:&lt;/p&gt;</description></item><item><title>Event Storming</title><link>https://position-pal.github.io/docs/2-domain-analysis/4-event-storming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/2-domain-analysis/4-event-storming/</guid><description>&lt;p&gt;To quickly and effectively extract the application&amp;rsquo;s core functionality, we used &lt;strong&gt;Event Storming&lt;/strong&gt; â€” a collaborative and visual modeling technique highly valued in agile and Domain-Driven Development.&lt;/p&gt;
&lt;p&gt;Its strength lies in bringing together a diverse, multidisciplinary group of experts, including architects, product owners, UI/UX designers, and testers.
By working collaboratively, they identify key features and the processes that drive them, ensuring that knowledge is shared across teams rather than remaining siloed.
Additionally, this approach promotes a consistent, shared language (&lt;em&gt;ubiquitous language&lt;/em&gt;) and helps uncover and resolve ambiguities or misunderstandings early in the project.&lt;/p&gt;</description></item><item><title>Bounded Contexts</title><link>https://position-pal.github.io/docs/3-arch-design/1-bounded-contexts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/3-arch-design/1-bounded-contexts/</guid><description>&lt;p&gt;Following the event storming session, the subsequent bounded contexts have been identified:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Users Management&lt;/strong&gt;: it is responsible for managing the users&amp;rsquo; lifecycle, from registration to deletion and the management of their profile information along with the authentication and authorization.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Groups Management&lt;/strong&gt;: it is responsible for managing the group lifecycle, from creation to deletion, and the management of the group members.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Location Tracking&lt;/strong&gt;: it is responsible for managing the location tracking of the users, including the sharing of the location with group members, the reception of location updates, the sending of SOS alerts and the management of their paths.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Notifications&lt;/strong&gt;: it is responsible for managing the notifications, including the push notifications to the users&amp;rsquo; devices.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Chat&lt;/strong&gt;: it is responsible for managing the chat between the users and the group members.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the following sections, we will provide a detailed view of each bounded context, including its &lt;strong&gt;&lt;em&gt;Ubiquitous Language&lt;/em&gt;&lt;/strong&gt;, the &lt;strong&gt;&lt;em&gt;Commands&lt;/em&gt;&lt;/strong&gt; and the &lt;strong&gt;&lt;em&gt;Events&lt;/em&gt;&lt;/strong&gt; guiding the interactions between the different contexts.
These can be categorized as &lt;strong&gt;&lt;em&gt;Driving&lt;/em&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;em&gt;Driven Events&lt;/em&gt;&lt;/strong&gt;: the former are the events triggered by the user&amp;rsquo;s actions and that drives an application use case, while the latter are the events that are triggered by the system as a reaction to a use case or a system state change.
Moreover we distinguish between &lt;em&gt;Commands&lt;/em&gt; and &lt;em&gt;Events&lt;/em&gt; to highlight the difference between a request to perform an action (&lt;em&gt;Command&lt;/em&gt;) and the notification of something meaningful that has happened (&lt;em&gt;Event&lt;/em&gt;).&lt;/p&gt;</description></item><item><title>Architecture Design</title><link>https://position-pal.github.io/docs/3-arch-design/2-architecture-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/3-arch-design/2-architecture-design/</guid><description>&lt;p&gt;Following the identification and definition of the quality attributes, a &lt;em&gt;&lt;strong&gt;microservice architecture&lt;/strong&gt;&lt;/em&gt; was chosen.
This is characterized by the decomposition of the system into a set of independent and loosely coupled services, each of which is responsible for a specific business domain or functionality.
Indeed, the use of this architectural style enables the continuous delivery and deployment of large, complex applications, the ability to scale horizontally with ease, the possibility to use different technologies and programming languages for each service and an increase in the overall system maintainability.
Moreover it allows to isolate failures and to improve the fault tolerance of the system, hence gaining in reliability.&lt;/p&gt;</description></item><item><title>Architectural Patterns</title><link>https://position-pal.github.io/docs/3-arch-design/4-patterns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/3-arch-design/4-patterns/</guid><description>&lt;p&gt;In this page are collected the Microservice Architectural Pattern we used in the design of the system, following the &lt;a href="https://position-pal.github.io/docs/3-arch-design/4-patterns/" rel="external" target="_blank"&gt;Chris Richardson&amp;rsquo;s taxonomy&lt;svg width="16" height="16" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path fill="currentColor" d="M14 5c-.552 0-1-.448-1-1s.448-1 1-1h6c.552 0 1 .448 1 1v6c0 .552-.448 1-1 1s-1-.448-1-1v-3.586l-7.293 7.293c-.391.39-1.024.39-1.414 0-.391-.391-.391-1.024 0-1.414l7.293-7.293h-3.586zm-9 2c-.552 0-1 .448-1 1v11c0 .552.448 1 1 1h11c.552 0 1-.448 1-1v-4.563c0-.552.448-1 1-1s1 .448 1 1v4.563c0 1.657-1.343 3-3 3h-11c-1.657 0-3-1.343-3-3v-11c0-1.657 1.343-3 3-3h4.563c.552 0 1 .448 1 1s-.448 1-1 1h-4.563z"/&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="service-collaboration"&gt;Service collaboration &lt;a href="#service-collaboration" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id="database-per-service"&gt;&lt;a href="https://microservices.io/patterns/data/database-per-service.html" rel="external" target="_blank"&gt;Database per Service&lt;svg width="16" height="16" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path fill="currentColor" d="M14 5c-.552 0-1-.448-1-1s.448-1 1-1h6c.552 0 1 .448 1 1v6c0 .552-.448 1-1 1s-1-.448-1-1v-3.586l-7.293 7.293c-.391.39-1.024.39-1.414 0-.391-.391-.391-1.024 0-1.414l7.293-7.293h-3.586zm-9 2c-.552 0-1 .448-1 1v11c0 .552.448 1 1 1h11c.552 0 1-.448 1-1v-4.563c0-.552.448-1 1-1s1 .448 1 1v4.563c0 1.657-1.343 3-3 3h-11c-1.657 0-3-1.343-3-3v-11c0-1.657 1.343-3 3-3h4.563c.552 0 1 .448 1 1s-.448 1-1 1h-4.563z"/&gt;&lt;/svg&gt;&lt;/a&gt; &lt;a href="#database-per-service" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Each microservice&amp;rsquo;s persistent data is private to that service and accessible only via its API.
More specifically, an approach where each microservice has &lt;strong&gt;its own schema&lt;/strong&gt; has been adopted, favoring &lt;em&gt;data isolation&lt;/em&gt;, making ownership of the data clearer and ensuring the services are &lt;em&gt;loosely coupled&lt;/em&gt;.&lt;/p&gt;</description></item><item><title>Big Picture</title><link>https://position-pal.github.io/docs/4-detailed-design/0-overall-architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/4-detailed-design/0-overall-architecture/</guid><description>&lt;p&gt;The following schema provides a high-level overview of the system, illustrating its components and their main interactions.
The goal is to give the reader a clear understanding of the system&amp;rsquo;s structure and dynamics without formal specifications.&lt;/p&gt;
&lt;p&gt;





 



 
 
 &lt;img src="https://position-pal.github.io/images/big-picture.png" alt="Big Picture" width="2373" height="1905" loading="lazy"&gt;
 
 
&lt;/p&gt;</description></item><item><title>Shared Kernel design</title><link>https://position-pal.github.io/docs/4-detailed-design/1-shared-kernel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/4-detailed-design/1-shared-kernel/</guid><description>&lt;p&gt;The shared kernel includes the common entities used by all services.
Its primary objective is to encapsulate &lt;em&gt;only&lt;/em&gt; the integration contracts and data structures meant to be passed across the boundaries of the bounded contexts.&lt;/p&gt;
&lt;p&gt;Since the system architecture is event-driven, communication between microservices occurs exclusively through events and commands exchanged via the message broker.
These have been represented as classes and interfaces, as illustrated in the following UML diagram.
This approach facilitates and reduce the cost of duplicating code across services, ensuring consistency and coherence in the system&amp;rsquo;s communication.&lt;/p&gt;</description></item><item><title>User and Group Service design</title><link>https://position-pal.github.io/docs/4-detailed-design/5-user-groups-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/4-detailed-design/5-user-groups-service/</guid><description>&lt;p&gt;In this section it is presented the abstract design of the &lt;strong&gt;User and Group Service&lt;/strong&gt;.
As per best practices, the design is based on the &lt;strong&gt;Domain-Driven Design&lt;/strong&gt; principles, and is presented in terms of the main three views: &lt;strong&gt;structure&lt;/strong&gt;, &lt;strong&gt;interaction&lt;/strong&gt;, and &lt;strong&gt;behavior&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id="abstract-design"&gt;Abstract Design &lt;a href="#abstract-design" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id="structure"&gt;Structure &lt;a href="#structure" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The main domain concepts and events are presented hereafter and reified in the following classes structure, following the DDD building blocks.&lt;/p&gt;
&lt;div style="width: 100%; overflow-x: auto; white-space: nowrap;"&gt;
 &lt;img 
 src="https://position-pal.github.io/res/user-group-service-structure-light.svg" 
 alt="user-group-service-structure schema" 
 style="max-width: 1100px;"
 class="schema"
 /&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;User&lt;/code&gt;&lt;/strong&gt;: The User entity represents an individual in the system. Each User is uniquely identified by a value object, &lt;em&gt;UserId&lt;/em&gt;, ensuring consistency and traceability. The entity includes attributes such as name, email, and password, which can be updated while maintaining the same identity.&lt;/p&gt;</description></item><item><title>Location Service design</title><link>https://position-pal.github.io/docs/4-detailed-design/2-location-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/4-detailed-design/2-location-service/</guid><description>&lt;!--This chapter explains the strategies used to meet the requirements identified in the analysis.--&gt;
&lt;p&gt;In this section it is presented the abstract design of the &lt;strong&gt;Location Service&lt;/strong&gt;.
As per best practices, the design is based on the &lt;strong&gt;Domain-Driven Design&lt;/strong&gt; principles, and is presented in terms of the main three views: &lt;strong&gt;structure&lt;/strong&gt;, &lt;strong&gt;interaction&lt;/strong&gt;, and &lt;strong&gt;behavior&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id="abstract-design"&gt;Abstract Design &lt;a href="#abstract-design" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id="structure"&gt;Structure &lt;a href="#structure" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The main domain concepts and events are presented hereafter and reified in the following classes structure, following the DDD building blocks.&lt;/p&gt;</description></item><item><title>Chat Service design</title><link>https://position-pal.github.io/docs/4-detailed-design/4-chat-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/4-detailed-design/4-chat-service/</guid><description>&lt;p&gt;Chat service is responsible for managing the &lt;strong&gt;communication between users in &lt;em&gt;real-time&lt;/em&gt;&lt;/strong&gt;. This document describes the detailed design of the chat service, including its architecture, components, and interactions.&lt;/p&gt;
&lt;h2 id="abstract-design"&gt;Abstract Design &lt;a href="#abstract-design" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Here are presented the main components of the chat service, we start describing the fundamental entities of the domain, then we move to the infrastructure layer, where we define the commands and events that will be used to interact with the domain entities.&lt;/p&gt;</description></item><item><title>Notification Service design</title><link>https://position-pal.github.io/docs/4-detailed-design/3-notification-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/4-detailed-design/3-notification-service/</guid><description>&lt;p&gt;In this section is presented the abstract design of the notification service.&lt;/p&gt;
&lt;p&gt;As already presented, its main responsibility is to &lt;strong&gt;send notifications&lt;/strong&gt; to the users, based on the events that occur in the system.&lt;/p&gt;
&lt;h2 id="structure"&gt;Structure &lt;a href="#structure" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The structure of the service is quite simple:&lt;/p&gt;
&lt;div style="width: 100%; overflow-x: auto; white-space: nowrap;"&gt;
 &lt;img 
 src="https://position-pal.github.io/res/notification-service-structure-light.svg" 
 alt="notification-service-structure schema" 
 style="max-width: 1100px;"
 class="schema"
 /&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Token&lt;/code&gt; is a value object that represents the token used to identify the device of a user.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UserToken&lt;/code&gt; is an entity that represents the association between a user and a token.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UsersTokensService&lt;/code&gt; is the service that allows registering and invalidating tokens for users.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UsersTokensRepository&lt;/code&gt; is the repository that stores the associations between users and tokens.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NotificationPublisher&lt;/code&gt; is the service that sends notifications to users.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PublishingTargetStrategy&lt;/code&gt; is the strategy used to determine the target of the notification. Two stategies exists: one to send to all members of a group (corresponding to the &lt;code&gt;GroupWisePushNotification&lt;/code&gt; command) and another to send to all members sharing a group with a user (corresponding to the &lt;code&gt;CoMembersPushNotification&lt;/code&gt; command).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GroupsRepository&lt;/code&gt; is the repository that allows storing and retrieving the members of the groups. This is called by the message broker adapter on every events whose topic is related to groups state changes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="interaction"&gt;Interaction &lt;a href="#interaction" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The main flow scenario is describe below and depicted in the following sequence UML diagram.&lt;/p&gt;</description></item><item><title>Commons implementation details</title><link>https://position-pal.github.io/docs/5-implementation/0-common/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/5-implementation/0-common/</guid><description>&lt;h2 id="message-broker-and-rpc-technologies"&gt;Message Broker and RPC technologies &lt;a href="#message-broker-and-rpc-technologies" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Position Pal&amp;rsquo;s event-based distributed system architecture relies on both synchronous and asynchronous communication between services. For asynchronous interactions, we use a message broker that decouples services and enables event-driven architectures, this handles message routing between services and ensures reliable event delivery. When synchronous communication is required we utilize Remote Procedure Call (RPC) technologies, allowing services to invoke each other&amp;rsquo;s methods as if they were local functionsâ€”an approach particularly effective for request-response interactions between services.&lt;/p&gt;</description></item><item><title>User and Group Service implementation details</title><link>https://position-pal.github.io/docs/5-implementation/4-user-groupd-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/5-implementation/4-user-groupd-service/</guid><description>&lt;p&gt;This chapter provides an overview of the implementation details of the &lt;strong&gt;User and Group Service&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id="high-level-overview"&gt;High level overview &lt;a href="#high-level-overview" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The User and Group Service is responsible for managing the users and groups of the system.
It is a core microservice that supplies user and group data to other services and is composed of the following parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Authentication Management&lt;/strong&gt;: This is responsible for managing the authentication and identity of the users of the system. It provides APIs for user authentication and identity management.&lt;/p&gt;</description></item><item><title>Location Service implementation details</title><link>https://position-pal.github.io/docs/5-implementation/1-location-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/5-implementation/1-location-service/</guid><description>&lt;p&gt;This chapter provides an overview of the implementation details of the &lt;strong&gt;Location Service&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id="high-level-overview"&gt;High level overview &lt;a href="#high-level-overview" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We adopted &lt;strong&gt;Clean Architecture&lt;/strong&gt; approach with clearly separated layers. This architectural choice provides significant benefits for a service responsible for sensitive user data:&lt;/p&gt;


 
 &lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plaintext" data-lang="plaintext"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;user-service/
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;â”œâ”€â”€ domain/ # Core business entities and rules
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;â”œâ”€â”€ application/ # Use cases and service interfaces
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;â”œâ”€â”€ storage/ # Database and persistence implementations
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;â”œâ”€â”€ presentation/ # Protocol definitions
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;â”œâ”€â”€ tracking-actors/ # Real-time tracking management adapter
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;â”œâ”€â”€ ws/ # Websocket communication adapter
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;â”œâ”€â”€ grpc/ # gRPC service implementations
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;â”œâ”€â”€ messages/ # RabbitMQ and Message broker integration
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;â””â”€â”€ entrypoint/ # Application bootstrap&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each layer has a specific responsibility with dependencies pointing inward toward the domain layer.
This approach allows us to isolate the core business logic from implementation details.&lt;/p&gt;</description></item><item><title>Chat Service implementation details</title><link>https://position-pal.github.io/docs/5-implementation/3-chat-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/5-implementation/3-chat-service/</guid><description>&lt;h2 id="chat-messaging-and-real-time-management"&gt;Chat Messaging and Real-time Management &lt;a href="#chat-messaging-and-real-time-management" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The primary functions of the chat service are to manage the &lt;em&gt;chat groups&lt;/em&gt; and the relative &lt;em&gt;messages&lt;/em&gt; that are exchanged between users of these groups.
In most of the cases the amount of messages exchanged is high, and the service needs to manage them in real-time with low latency of response.&lt;/p&gt;
&lt;p&gt;We built a &lt;strong&gt;WebSocket-based&lt;/strong&gt; communication system using an actor model. Specifically, we leveraged the &lt;strong&gt;Event Sourcing&lt;/strong&gt; module from the &lt;em&gt;Akka framework&lt;/em&gt; to handle Group instances. This approach treats Events as first-class citizens while maintaining consistent chat state.&lt;/p&gt;</description></item><item><title>Notification Service implementation details</title><link>https://position-pal.github.io/docs/5-implementation/2-notification-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/5-implementation/2-notification-service/</guid><description>&lt;!--## High level overview and modules structure--&gt;
&lt;p&gt;Currently, the only supported notification types are &lt;strong&gt;push notifications&lt;/strong&gt;, which are essential to guarantee that the client is immediately informed about groups changes or user state changes, like the trigger of the SOS alert or the journey start.&lt;/p&gt;
&lt;h2 id="high-level-overview"&gt;High level overview &lt;a href="#high-level-overview" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We adopted &lt;strong&gt;Clean Architecture&lt;/strong&gt; approach with clearly separated layers. This architectural choice provides significant benefits for a service responsible for sensitive user data:&lt;/p&gt;</description></item><item><title>Api Documentation</title><link>https://position-pal.github.io/docs/5bis-api-doc/api.doc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/5bis-api-doc/api.doc/</guid><description>&lt;h2 id="location-service-async-api"&gt;Location Service Async API &lt;a href="#location-service-async-api" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The Location Service Websocket API is documented using the &lt;strong&gt;AsyncAPI specification&lt;/strong&gt;, which provides a standardized format for defining and describing asynchronous APIs.
By leveraging &lt;em&gt;AsyncAPI&lt;/em&gt;, the Location Service API ensures clear communication patterns, message structures, and data formats&lt;/p&gt;
&lt;iframe src="https://position-pal.github.io/location-service/asyncapi/" width="100%" height="700"&gt;&lt;/iframe&gt;
&lt;p&gt;[Ref: &lt;a href="https://position-pal.github.io/location-service/asyncapi/" rel="external" target="_blank"&gt;Location Service AsyncAPI&lt;svg width="16" height="16" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path fill="currentColor" d="M14 5c-.552 0-1-.448-1-1s.448-1 1-1h6c.552 0 1 .448 1 1v6c0 .552-.448 1-1 1s-1-.448-1-1v-3.586l-7.293 7.293c-.391.39-1.024.39-1.414 0-.391-.391-.391-1.024 0-1.414l7.293-7.293h-3.586zm-9 2c-.552 0-1 .448-1 1v11c0 .552.448 1 1 1h11c.552 0 1-.448 1-1v-4.563c0-.552.448-1 1-1s1 .448 1 1v4.563c0 1.657-1.343 3-3 3h-11c-1.657 0-3-1.343-3-3v-11c0-1.657 1.343-3 3-3h4.563c.552 0 1 .448 1 1s-.448 1-1 1h-4.563z"/&gt;&lt;/svg&gt;&lt;/a&gt;].&lt;/p&gt;</description></item><item><title>Self Assessment and Validation</title><link>https://position-pal.github.io/docs/6-validation/validation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/6-validation/validation/</guid><description>&lt;p&gt;Different types of &lt;em&gt;automated&lt;/em&gt; tests, at different granularity, are in place to ensure the correctness of the system, as well as the quality of the software product as a whole.&lt;/p&gt;
&lt;p&gt;The testing strategy follows &lt;a href="https://martinfowler.com/articles/practical-test-pyramid.html" rel="external" target="_blank"&gt;Martin Fowlerâ€™s Test Pyramid idea&lt;svg width="16" height="16" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path fill="currentColor" d="M14 5c-.552 0-1-.448-1-1s.448-1 1-1h6c.552 0 1 .448 1 1v6c0 .552-.448 1-1 1s-1-.448-1-1v-3.586l-7.293 7.293c-.391.39-1.024.39-1.414 0-.391-.391-.391-1.024 0-1.414l7.293-7.293h-3.586zm-9 2c-.552 0-1 .448-1 1v11c0 .552.448 1 1 1h11c.552 0 1-.448 1-1v-4.563c0-.552.448-1 1-1s1 .448 1 1v4.563c0 1.657-1.343 3-3 3h-11c-1.657 0-3-1.343-3-3v-11c0-1.657 1.343-3 3-3h4.563c.552 0 1 .448 1 1s-.448 1-1 1h-4.563z"/&gt;&lt;/svg&gt;&lt;/a&gt;, which advocates for a higher number of low-level unit tests that are that are fast and cost-effective, complemented by fewer high-level integration and end-to-end tests that, while slower and more complex, validate the overall system&amp;rsquo;s functionalities.&lt;/p&gt;</description></item><item><title>DevOps</title><link>https://position-pal.github.io/docs/7-devops/devops/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/7-devops/devops/</guid><description>&lt;h2 id="build-automation"&gt;Build Automation &lt;a href="#build-automation" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Since all microservices are JVM-based (Scala and Kotlin) &lt;strong&gt;Gradle&lt;/strong&gt; have been chosen as the build automation tool.&lt;/p&gt;
&lt;p&gt;Regarding the frontend and the gateway, since they are both written in Javascript, the team has chosen &lt;strong&gt;npm&lt;/strong&gt; as the build automation tool.&lt;/p&gt;
&lt;p&gt;In the following sections we provide an overview of the relevant configurations and plugins used in the project.&lt;/p&gt;
&lt;h3 id="projects-structure-and-shared-kernel-package"&gt;Projects Structure and shared kernel package &lt;a href="#projects-structure-and-shared-kernel-package" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The team has decided to implement the microservices using a &lt;strong&gt;one-repository-per-service&lt;/strong&gt; approach, with each service managed as an &lt;strong&gt;independent&lt;/strong&gt; Gradle project, where Gradle sub-projects are used to structure the code, mapping each layer and adapter in the Hexagonal Architecture to a dedicated sub-project.&lt;/p&gt;</description></item><item><title>Deployment &amp; Monitoring</title><link>https://position-pal.github.io/docs/8-deployment/deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/8-deployment/deployment/</guid><description>&lt;p&gt;Since our system is composed of multiple microservices, we decided to deploy it on a &lt;strong&gt;Kubernetes cluster&lt;/strong&gt;. Kubernetes is an open-source platform designed to automate deploying, scaling, and operating application containers. It is a powerful tool that allows us to manage our microservices in a more efficient way.&lt;/p&gt;
&lt;p&gt;In particular the system is mapped on the main abstractions the Kubernetes provides:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Deployment&lt;/strong&gt;: A Deployment is a higher-level API object that manages the execution of a set of pods. It provides declarative updates to applications, such as rolling updates, scaling, and pausing and resuming processes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Service&lt;/strong&gt;: A Service is a resource that provides a stable network endpoint for accessing a set of pods. It acts as an abstraction layer that routes traffic to the appropriate pods, even if these are in status &amp;ldquo;created&amp;rdquo;, &amp;ldquo;destroyed&amp;rdquo;, or &amp;ldquo;moved&amp;rdquo;. In our cluster we have two kind of services: &lt;code&gt;ClusterIP&lt;/code&gt; and &lt;code&gt;LoadBalancer&lt;/code&gt;.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ClusterIP&lt;/strong&gt;: Exposes the service on a cluster-internal IP. Choosing this value makes the service only reachable from within the cluster.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LoadBalancer&lt;/strong&gt;: Exposes the service externally using a cloud provider&amp;rsquo;s load balancer.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kubernetes also allows to define other resources that can be used to configure data usage inside the cluster:&lt;/p&gt;</description></item><item><title>Conclusions ðŸŽ‰</title><link>https://position-pal.github.io/docs/9-conclusions/conclusions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://position-pal.github.io/docs/9-conclusions/conclusions/</guid><description>&lt;p&gt;Position Pal was a valuable learning experience in applying modern development practices in a real world scenario.&lt;/p&gt;
&lt;p&gt;By utilizing Domain-Driven Design, the team gained a clearer understanding of the domain, which helped in the design and development phases of the whole system.&lt;/p&gt;
&lt;p&gt;The incorporation of DevOps practices contributed to a more streamlined and predictable development process, while Kubernetes provided a powerful environment for managing deployments.&lt;/p&gt;
&lt;p&gt;Overall, the project served as a modest yet effective exploration of building reliable microservices for creating a safe network among friends, with plenty of lessons learned along the way, including:&lt;/p&gt;</description></item></channel></rss>